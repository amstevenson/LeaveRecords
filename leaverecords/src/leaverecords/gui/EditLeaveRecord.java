/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package leaverecords.gui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import staffdatamodel.LeaveStatusType;
import staffdatamodel.LeaveType;
import static staffdatamodel.LeaveType.ANNUAL;
import static staffdatamodel.LeaveType.SICK;
import static staffdatamodel.LeaveType.SPECIAL;
import staffdatamodel.Request;
import staffdatamodel.StaffList;
import staffdatamodel.StaffMember;

/**
 * Form to change requests; a user must selected a staff member, and a valid
 * request, in order to view this form 
 * 
 * @author Adam Stevenson
 */
public class EditLeaveRecord extends javax.swing.JFrame {
    
    private StaffList staffList;
    private int selectedStaffMember;
    private int selectedRequest;
    private DefaultComboBoxModel<LeaveType> leaveTypeModel =
            new DefaultComboBoxModel<>(LeaveType.values());
    private DefaultComboBoxModel<LeaveStatusType> statusModel =
            new DefaultComboBoxModel<>(LeaveStatusType.values());
    
    /**
     * Creates new form EditLeaveRecord
     */
    public EditLeaveRecord() {
        initComponents();
        backgroundPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblEditRequest = new javax.swing.JLabel();
        txtEditSpecialReason = new javax.swing.JTextField();
        txtEditDaysLeft = new javax.swing.JTextField();
        txtEditDuration = new javax.swing.JTextField();
        lblEditLeaveType = new javax.swing.JLabel();
        lblEditStatus = new javax.swing.JLabel();
        lblEditStartDate = new javax.swing.JLabel();
        lblEditDuration = new javax.swing.JLabel();
        lblEditDaysLeft = new javax.swing.JLabel();
        lblEditSpecialReason = new javax.swing.JLabel();
        cboLeaveType = new javax.swing.JComboBox();
        cboStatus = new javax.swing.JComboBox();
        jDateSD = new com.toedter.calendar.JDateChooser();
        jDateED = new com.toedter.calendar.JDateChooser();
        lblEditStartDate1 = new javax.swing.JLabel();
        btnEditRequest = new javax.swing.JButton();
        btnEditCancel = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        btnDecline = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(930, 0, 0, 0));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblHeading.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("Edit a Leave Request");

        jButton1.setText("Help");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(lblHeading))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblEditRequest.setText("Selected Request:");

        txtEditDaysLeft.setEditable(false);

        lblEditLeaveType.setText("Leave Type:");

        lblEditStatus.setText("Status:");

        lblEditStartDate.setText("Start Date:");

        lblEditDuration.setText("Duration:");

        lblEditDaysLeft.setText("Days Left:");

        lblEditSpecialReason.setText("Special Reason:");

        cboLeaveType.setModel(leaveTypeModel);

        cboStatus.setModel(statusModel);
        cboStatus.setEnabled(false);

        jDateSD.setDateFormatString("dd-MM-yyyy");

        jDateED.setDateFormatString("dd-MM-yyyy");
        jDateED.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateEDPropertyChange(evt);
            }
        });

        lblEditStartDate1.setText("End Date:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditDuration, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditDaysLeft, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditSpecialReason, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtEditSpecialReason)
                        .addComponent(txtEditDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtEditDaysLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditLeaveType, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditStartDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditStartDate1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblEditRequest)
                    .addComponent(jDateSD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboStatus, 0, 120, Short.MAX_VALUE)
                    .addComponent(cboLeaveType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateED, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(181, 181, 181))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblEditRequest)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEditLeaveType)
                    .addComponent(cboLeaveType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEditStatus)
                    .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditStartDate)
                    .addComponent(jDateSD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jDateED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEditDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditDuration))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEditSpecialReason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditSpecialReason))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEditDaysLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditDaysLeft)))
                    .addComponent(lblEditStartDate1))
                .addGap(38, 38, 38))
        );

        btnEditRequest.setText("Change Request Details");
        btnEditRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditRequestMouseClicked(evt);
            }
        });

        btnEditCancel.setText("Close");
        btnEditCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditCancelMouseClicked(evt);
            }
        });

        btnApprove.setText("Approve");
        btnApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnApproveMouseClicked(evt);
            }
        });

        btnDecline.setText("Decline");
        btnDecline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeclineMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 78, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnApprove)
                .addGap(43, 43, 43)
                .addComponent(btnDecline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addComponent(btnEditRequest)
                .addGap(46, 46, 46)
                .addComponent(btnEditCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecline, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditRequestMouseClicked
        editRequest();
    }//GEN-LAST:event_btnEditRequestMouseClicked

    private void btnEditCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditCancelMouseClicked
        dispose();
    }//GEN-LAST:event_btnEditCancelMouseClicked

    private void btnApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnApproveMouseClicked
        cboStatus.setSelectedIndex(1);
        editRequest();
    }//GEN-LAST:event_btnApproveMouseClicked

    private void btnDeclineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeclineMouseClicked
         cboStatus.setSelectedIndex(2);
         editRequest();
    }//GEN-LAST:event_btnDeclineMouseClicked

    private void jDateEDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateEDPropertyChange
        calculateDuration();
    }//GEN-LAST:event_jDateEDPropertyChange

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
         JOptionPane.showMessageDialog(this,
            "<html> Altering a request: <br><br>"
                 + "Simply change one of the fields that have been displayed. <br>"
                 + "The total days left can not go below 0. If this happens,"
                 + "Search for another request and decline it (if the start date has not"
                 + "already passed).",
            "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditLeaveRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditLeaveRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditLeaveRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditLeaveRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditLeaveRecord().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton btnEditCancel;
    private javax.swing.JButton btnEditRequest;
    private javax.swing.JComboBox cboLeaveType;
    private javax.swing.JComboBox cboStatus;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateED;
    private com.toedter.calendar.JDateChooser jDateSD;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblEditDaysLeft;
    private javax.swing.JLabel lblEditDuration;
    private javax.swing.JLabel lblEditLeaveType;
    private javax.swing.JLabel lblEditRequest;
    private javax.swing.JLabel lblEditSpecialReason;
    private javax.swing.JLabel lblEditStartDate;
    private javax.swing.JLabel lblEditStartDate1;
    private javax.swing.JLabel lblEditStatus;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JTextField txtEditDaysLeft;
    private javax.swing.JTextField txtEditDuration;
    private javax.swing.JTextField txtEditSpecialReason;
    // End of variables declaration//GEN-END:variables

    /**
     * Changes the background image of the form
     */
     public void backgroundPanel(){    
    
        setTitle("Edit Request");
        
        setLayout(new BorderLayout());
        JLabel lblBackground = new JLabel(new ImageIcon("images/Background.JPG"));
        
        add (lblBackground);
        lblBackground.setLayout(new FlowLayout());
    }
      
   /**
    * Initialise the staff member, and request data ;provides the stafflist, 
    * leaveRecord, and relevant indexes, then sets the text fields
    * 
    * @param staffList = arraylist of staff
    * @param selectedStaffMember index of staff member 
    * @param selectedRequest index of the staff members selected request
    * @param dateSD the start date of the request; changed towards the end
    * of this method, to determine the jDateED value (second date picker).
    * This is in a date format
    * @param calSD the start date of the request in a calendar format. 
    * Used for calculations.
    */
    public void setLeaveRecord(StaffList objTarget,  int objMemberIndex,
            int objRequestIndex){
          
        // lists and indexes
        staffList = objTarget;
        selectedStaffMember = objMemberIndex;
        selectedRequest = objRequestIndex;
            
        // staff members request
        StaffMember objCurrStaff = staffList.getStaffAt(selectedStaffMember);
        Request objCurrRequest = objCurrStaff.getRequestAt(selectedRequest);
        
        // retrieve start date
        Date dateSD = objCurrRequest.getStartDate();
        Calendar calSD = Calendar.getInstance();
        calSD.setTime(dateSD);
        
        // calculate end date
        int endDate = calSD.get(Calendar.DAY_OF_YEAR);
        endDate += objCurrRequest.getDuration();
        
            // retrive leaveType and Status
            switch (objCurrRequest.getLeaveType())
            {
                case ANNUAL:
                    this.leaveTypeModel.setSelectedItem(objCurrRequest.
                            getLeaveType().ANNUAL);
                    break;
                case SPECIAL:
                    this.leaveTypeModel.setSelectedItem(objCurrRequest.
                            getLeaveType().SPECIAL);
                    break;
                case SICK:
                    this.leaveTypeModel.setSelectedItem(objCurrRequest.
                            getLeaveType().SICK);
                    break;
                default:
                throw new AssertionError();  
            }
             
            switch (objCurrRequest.getStatus())
            {
                case PENDING:
                    this.statusModel.setSelectedItem(objCurrRequest.
                            getStatus().PENDING);
                    break;
                case APPROVED:
                    this.statusModel.setSelectedItem(objCurrRequest.
                            getStatus().APPROVED);
                    break;
                case DECLINED:
                    this.statusModel.setSelectedItem(objCurrRequest.
                            getStatus().DECLINED);
                    break;
                default:
                throw new AssertionError();  
            }   
        
       // fill text box values with request data
       jDateSD.setDate(dateSD);
       calSD.set(Calendar.DAY_OF_YEAR, endDate); // end date calculation
       jDateED.setDate(calSD.getTime());
       txtEditDuration.setText(Integer.toString(objCurrRequest.getDuration()));
       txtEditDaysLeft.setText(Integer.toString(objCurrStaff.getDaysLeft()));
       txtEditSpecialReason.setText(objCurrRequest.getSpecialReason());
    }

   /**
    * Edit the request details:
    * The request index is provided and used to alter the leave record
    * 
    * @param objCurrStaff the selected staff member
    * @param objCurrRequest the selected request
    * @param editDuration the new duration; from the relevant textbox
    * @param editDaysLeft the days left for the staff member.
    * @see method "isEditable" for information pertaining to valid field entries.
    */
    private void editRequest(){
        
        if (this.isEditable()){
        
            // initialise method variables
            StaffMember objCurrStaff
                    = staffList.getStaffAt(selectedStaffMember);
            Request objCurrRequest =
                    objCurrStaff.getRequestAt(selectedRequest);
            int editDuration = Integer.parseInt(txtEditDuration.getText());
            int editDaysLeft = objCurrStaff.getDaysLeft();
            
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to edit this request: Start Date:"
                    + objCurrStaff.getRequestAt(selectedRequest).getDateAsString()
                    + " for: " + objCurrStaff.getRequestAt(selectedRequest).getDuration()
                    + " Day(s)",
                    "Confirm change", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION)
            {
                // validate and edit the request information
                if (txtEditDuration.getText().length()> 0 && 
                        txtEditDaysLeft.getText().length() > 0 &&
                        txtEditSpecialReason.getText().length()> 0)
                    {
                        // change the start date
                        objCurrRequest.setStartDate(jDateSD.getDate());
                        
                        // change duration
                        objCurrRequest.setDuration(editDuration);
                        
                        // change special reason
                        objCurrRequest.setSpecialReason(
                                txtEditSpecialReason.getText());
                        
                        // change leaveType
                        switch (cboLeaveType.getSelectedIndex())
                           {
                            case 0:
                                objCurrRequest.setLeaveType(LeaveType.ANNUAL);
                                break;
                            case 1:
                                objCurrRequest.setLeaveType(LeaveType.SPECIAL);
                                break;
                            case 2:
                                objCurrRequest.setLeaveType(LeaveType.SICK);
                                break;
                            default:
                            throw new AssertionError();  
                          }

                        // change the status
                        switch(cboStatus.getSelectedIndex())
                           {
                           case 0:
                                objCurrRequest.setStatus(
                                        LeaveStatusType.PENDING);
                                break;
                                 
                           case 1:                             
                               if (editDuration > editDaysLeft)
                                   {
                                         // requests with a duration higher than the days left
                                         // are approved when the leave type is not annual
                                         switch(cboLeaveType.getSelectedIndex())
                                         {
                                             case 0:
                                                    JOptionPane.showMessageDialog(this, "The "
                                                    + " staff member does not have enough leave"
                                                    + " to authorise this request", 
                                                    "Invalid request!", JOptionPane.ERROR_MESSAGE);  
                                             case 1: 
                                                 objCurrStaff.approveRequest(selectedRequest);
                                                 break;
                                             case 2:
                                                 objCurrStaff.approveRequest(selectedRequest);
                                             default:   
                                         }
                                   }
                               else
                               {
                                   objCurrStaff.approveRequest(selectedRequest);
                               }
                               break;   

                          case 2:
                               if(objCurrStaff.getDaysLeft() >= 0)
                                {
                                     objCurrStaff.declineRequest(selectedRequest);
                                }
                                break;
                            }
                      }
                      JOptionPane.showMessageDialog(this, 
                      "Request has been successfully editted", 
                      "Request changed successfully", 
                      JOptionPane.INFORMATION_MESSAGE);
                      staffList.notifyObservers();
                      this.dispose();
             }
        } 
    }
    
   /**
    * When the end date JDateChooser has a property change, this method is used
    * to automatically calculate the duration
    * 
    * @param dateSD the start date, formatted as type: Date
    * @param calSD the start date, formatted as type: Calendar
    * @param dateED the end date, formatted as type: Date
    * @param calED the end date, formatted as type: Calendar
    * 
    * @throws NullPointerException 
    */
    private void calculateDuration ()
    {
        try{
        
        if(jDateSD != null)
        {
        
        // start date
        Date dateSD = jDateSD.getDate();
        Calendar calSD = Calendar.getInstance();
        calSD.setTime(dateSD);
        
        // end date
        Date dateED = jDateED.getDate();
        Calendar calED = Calendar.getInstance();
        calED.setTime(dateED);
        
            if (calSD.get(Calendar.DAY_OF_YEAR) > calED.get(Calendar.DAY_OF_YEAR)) 
            {
                JOptionPane.showMessageDialog(this, "The start date is before the end date"
                        + ", please make alterations.", 
                "Invalid Data!", JOptionPane.ERROR_MESSAGE);

                jDateED.setDate(dateED);

            }
            else{
                int duration = calED.get(Calendar.DAY_OF_YEAR) - calSD.get(Calendar.DAY_OF_YEAR);
                
                txtEditDuration.setText("" + duration);
            }   
        }
        }
        catch (NullPointerException ex){}
    }
    
   /**
    * Before the leave record request can be edited, all text boxes 
    * need to contain valid data, as we are editing a request, and not creating
    * a new one; with a new request three constructors are possible
    */
    private Boolean isEditable()
    {
        Boolean blnValid = false;
        try
        {
            if (jDateSD.getDateFormatString().length() > 0 && 
                    txtEditDuration.getText().length()>0 &&
                    txtEditDaysLeft.getText().length() > 0 && 
                    txtEditSpecialReason.getText().length() > 0)
            {
                blnValid = true;
            } else
            {
                throw new IllegalArgumentException(
                        "All text boxes need to contain valid data (text)");
            }
        } catch (NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this, "The provided data is invalid",
                    "Error reading data", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), 
                    "Invalid Data!", JOptionPane.ERROR_MESSAGE);
        }
        return blnValid;
    }
    
}
