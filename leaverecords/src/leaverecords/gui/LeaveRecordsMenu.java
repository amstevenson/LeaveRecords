/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package leaverecords.gui;

import command.interfaces.ICommand;
import command.interfaces.ICommandBehaviour;
import command.interfaces.ICommandTracker;
import commandtracker.Command;
import commandtracker.CommandTracker;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import leaverecords.commands.DeleteStaffMemberCommand;
import observertestharness.IObserver;
import staffdatamodel.LeaveRecord;
import staffdatamodel.Request;
import staffdatamodel.StaffList;
import staffdatamodel.StaffMember;

/**
 *
 * The main applications form,
 * Concerned with displaying staff members and their leave requests/allocation.
 * 
 * @author Adam Stevenson
 */
public class LeaveRecordsMenu extends javax.swing.JFrame implements IObserver {
   
    private ICommandTracker objCmdTracker = new CommandTracker();
    private StaffList staffList;
    private LeaveRecord leaveRecord;
    private String saveDirectory;
    private DefaultListModel listModel;
    private DefaultListModel requestsModel;
    private int staffMemberSelectedIndex;
    private int requestSelectedIndex;
    
    /**
     * Creates new form LeaveRecordsMenu
     * @param staffList - is used to contain the staff members. It is also sent to different forms
     * for a variety of different processes.
     * @param listModel - The list concerned with displaying staff members
     * 
     * 
     */
    public LeaveRecordsMenu() {
        
        staffList = new StaffList();
        leaveRecord = new LeaveRecord();
        listModel = new DefaultListModel();
        requestsModel = new DefaultListModel();
        
        // Register an observer to the StaffList and LeaveRecord arraylists
        
        staffList.registerObserver(this);
        leaveRecord.registerObserver(this);
        
        initComponents();
        
        // Create the interface graphics // refresh listmodel
        backgroundPanel(); 
        refreshListModel();
        
        // load up default file - if it exists
        loadStartData();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtDepartment = new javax.swing.JTextField();
        lblDept = new javax.swing.JLabel();
        txtSurname = new javax.swing.JTextField();
        lblSurname = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblStaffList = new javax.swing.JLabel();
        lstStaffMembers = new javax.swing.JScrollPane();
        lstStaffList = new javax.swing.JList();
        lblBackground = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        btnHelp = new javax.swing.JButton();
        btnEditStaffMember = new javax.swing.JButton();
        btnNewStaffMember = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblRequests = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRequests = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        lblRequest = new javax.swing.JLabel();
        txtLeaveType = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        txtStartDate = new javax.swing.JTextField();
        txtSpecialReason = new javax.swing.JTextField();
        txtDaysLeft = new javax.swing.JTextField();
        txtDuration = new javax.swing.JTextField();
        lblLeaveType = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblDuration = new javax.swing.JLabel();
        lblDaysLeft = new javax.swing.JLabel();
        lblSpecialReason = new javax.swing.JLabel();
        btnEditRequest = new javax.swing.JButton();
        btnAddRequest = new javax.swing.JButton();
        btnDeleteStaff = new javax.swing.JButton();
        btnClearAllLeave = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuLoadData = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenuItem();
        mnuSaveDefault = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        MnuEdit = new javax.swing.JMenu();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtDepartment.setEditable(false);

        lblDept.setText("Department:");

        txtSurname.setEditable(false);

        lblSurname.setText("Surname:");

        txtFirstName.setEditable(false);

        lblFirstName.setText("First Name:");

        jLabel1.setText("Selected Staff Member:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSurname)
                            .addComponent(lblDept))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSurname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDepartment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblFirstName)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSurname))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDept))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblStaffList.setText("List of Staff Members:");

        lstStaffList.setModel(listModel
        );
        lstStaffList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstStaffList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstStaffListMouseClicked(evt);
            }
        });
        lstStaffMembers.setViewportView(lstStaffList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lstStaffMembers)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(lblStaffList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblStaffList)
                .addGap(18, 18, 18)
                .addComponent(lstStaffMembers, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblHeading.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("    Leave Records");

        btnHelp.setText("Help");
        btnHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHelpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnEditStaffMember.setText("Change Staff Details");
        btnEditStaffMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditStaffMemberMouseClicked(evt);
            }
        });

        btnNewStaffMember.setText("Add Staff");
        btnNewStaffMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewStaffMemberMouseClicked(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRequests.setText("Requests:");

        lstRequests.setModel(requestsModel
        );
        lstRequests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        lstRequests.addMouseListener(new java.awt.event.MouseAdapter(){

            public void mouseClicked(java.awt.event.MouseEvent evt){
                lstRequestsMouseClicked(evt);
            }

        });
        lstRequests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstRequestsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstRequests);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(lblRequests)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblRequests)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRequest.setText("Selected Request:");

        txtLeaveType.setEditable(false);

        txtStatus.setEditable(false);

        txtStartDate.setEditable(false);

        txtSpecialReason.setEditable(false);

        txtDaysLeft.setEditable(false);

        txtDuration.setEditable(false);

        lblLeaveType.setText("Leave Type:");

        lblStatus.setText("Status:");

        lblStartDate.setText("Start Date:");

        lblDuration.setText("Duration:");

        lblDaysLeft.setText("Remaining days left:");

        lblSpecialReason.setText("Special Reason:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSpecialReason, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblStartDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDuration, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDaysLeft, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLeaveType, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblRequest)
                        .addComponent(txtLeaveType)
                        .addComponent(txtStatus)
                        .addComponent(txtStartDate)
                        .addComponent(txtSpecialReason)
                        .addComponent(txtDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                    .addComponent(txtDaysLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblRequest)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLeaveType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLeaveType))
                .addGap(13, 13, 13)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDuration))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDaysLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDaysLeft))
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSpecialReason, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSpecialReason))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        btnEditRequest.setText("Manage Request");
        btnEditRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditRequestMouseClicked(evt);
            }
        });

        btnAddRequest.setText("Add Leave Request");
        btnAddRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddRequestMouseClicked(evt);
            }
        });

        btnDeleteStaff.setText("Delete Staff");
        btnDeleteStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteStaffMouseClicked(evt);
            }
        });

        btnClearAllLeave.setText("Clear All Leave");
        btnClearAllLeave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearAllLeaveMouseClicked(evt);
            }
        });

        mnuFile.setText("File");

        mnuLoadData.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuLoadData.setText("Load Data");
        mnuLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadDataActionPerformed(evt);
            }
        });
        mnuFile.add(mnuLoadData);

        mnuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuSaveAs.setText("Save As");
        mnuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveAsActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveAs);

        mnuSaveDefault.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSaveDefault.setText("Save");
        mnuSaveDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveDefaultActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveDefault);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        MnuEdit.setText("Edit");

        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/leaverecords/gui/undo.png"))); // NOI18N
        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        MnuEdit.add(mnuUndo);

        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/leaverecords/gui/redo.png"))); // NOI18N
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        MnuEdit.add(mnuRedo);

        jMenuBar1.add(MnuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblBackground)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnNewStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditStaffMember))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnAddRequest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnClearAllLeave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblBackground)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClearAllLeave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNewStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveAsActionPerformed
        saveStaffListData();
    }//GEN-LAST:event_mnuSaveAsActionPerformed

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        // Ask the CommandTracker to undo the last command
        this.objCmdTracker.undoLastCommand();
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadDataActionPerformed
        loadStaffListData();
    }//GEN-LAST:event_mnuLoadDataActionPerformed

    private void lstStaffListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstStaffListMouseClicked
        showSelectedStaffMember();
        refreshRequestsModel();
    }//GEN-LAST:event_lstStaffListMouseClicked

    private void btnHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHelpMouseClicked
         JOptionPane.showMessageDialog(this,
            "<html>Processing a request: To process a request, click on a staff member, and then press the 'add request' button.   "
                 + "<br><br>Delete: In order to delete a staff member, you need to first go into the edit menu, then you can press the delete button:  "
                 + "<br><br>Clear all leave: This can only be done on the 1st of January every year.</html> \"",
            "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnHelpMouseClicked

    private void btnEditStaffMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditStaffMemberMouseClicked
        if (lstStaffList.getSelectedIndex() >=0){
            EditStaffMember objWindow = new EditStaffMember();
            objWindow.setStaffList(staffList, lstStaffList.getSelectedIndex());
            objWindow.setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                "Please select a valid staff member",
                "No selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditStaffMemberMouseClicked

    private void btnNewStaffMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewStaffMemberMouseClicked
        
        AddStaffMember objWindow = new AddStaffMember();
        
        objWindow.setVisible(true);
        objWindow.setStaffList(staffList);
    }//GEN-LAST:event_btnNewStaffMemberMouseClicked

    private void mnuSaveDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveDefaultActionPerformed
        saveStaffListDataDefault();
    }//GEN-LAST:event_mnuSaveDefaultActionPerformed

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnExitMouseClicked

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void lstRequestsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstRequestsMouseClicked
        showSelectedRequest();
    }//GEN-LAST:event_lstRequestsMouseClicked

    private void btnEditRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditRequestMouseClicked
        if(lstRequests.getSelectedIndex() >=0){
            
            EditLeaveRecord objWindow = new EditLeaveRecord();
            objWindow.setLeaveRecord(staffList, staffMemberSelectedIndex, requestSelectedIndex);
            objWindow.setVisible(true);
        }
        else {
                JOptionPane.showMessageDialog(this,
                "Please select a valid request",
                "No selection", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnEditRequestMouseClicked

    private void btnAddRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddRequestMouseClicked
        if(lstStaffList.getSelectedIndex() >=0)
        {
            AddNewLeaveRequest objWindow = new AddNewLeaveRequest();
            objWindow.setStaffList(staffList, staffMemberSelectedIndex, leaveRecord);
            objWindow.setVisible(true);
        }
        else
        {
                JOptionPane.showMessageDialog(this,
                "Please select a valid staff member",
                "No selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddRequestMouseClicked

    private void btnDeleteStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteStaffMouseClicked
            deleteStaffMember();
    }//GEN-LAST:event_btnDeleteStaffMouseClicked

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
            // Ask the CommandTracker to redo the last command
            this.objCmdTracker.redoLastCommand();
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void btnClearAllLeaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAllLeaveMouseClicked
            clearAllLeave();
    }//GEN-LAST:event_btnClearAllLeaveMouseClicked
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaveRecordsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaveRecordsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaveRecordsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaveRecordsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaveRecordsMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MnuEdit;
    private javax.swing.JButton btnAddRequest;
    private javax.swing.JButton btnClearAllLeave;
    private javax.swing.JButton btnDeleteStaff;
    private javax.swing.JButton btnEditRequest;
    private javax.swing.JButton btnEditStaffMember;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnNewStaffMember;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDaysLeft;
    private javax.swing.JLabel lblDept;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblLeaveType;
    private javax.swing.JLabel lblRequest;
    private javax.swing.JLabel lblRequests;
    private javax.swing.JLabel lblSpecialReason;
    private javax.swing.JLabel lblStaffList;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JList lstRequests;
    private javax.swing.JList lstStaffList;
    private javax.swing.JScrollPane lstStaffMembers;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuLoadData;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuSaveAs;
    private javax.swing.JMenuItem mnuSaveDefault;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JTextField txtDaysLeft;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLeaveType;
    private javax.swing.JTextField txtSpecialReason;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtSurname;
    // End of variables declaration//GEN-END:variables

   /**
    * Method to create the graphics for the form; current: background
    */
    public void backgroundPanel(){    
    
        setTitle("Leave Records");
        
        setLayout(new BorderLayout());
        JLabel lblBackground = new JLabel(new ImageIcon("images/Background.JPG"));
        
        add (lblBackground);
        lblBackground.setLayout(new FlowLayout());
    }
    
    
    //////////////////////////////////////////////////////////////////////////
    //                   Methods for populating list models                 //
    //////////////////////////////////////////////////////////////////////////
    

   /**
    * Populator method for the stafflist listbox. It adds every staff member
    * that is in the staff list
    * 
    * @param objCurrMember = the member that will be added to the listbox. 
    * This parameter will contain a majority of staffmembers; the stafflist is 
    * cycled through to selected and attach each staff member to the list. 
    */
     private void refreshListModel()
    {
        listModel.clear();   
        StaffMember objCurrMember;
        if (this.staffList != null && this.staffList.size() > 0){ 
            for (int i = 0; i < staffList.size(); i++){
                objCurrMember = staffList.getStaffAt(i);
               listModel.addElement("Name : " + objCurrMember.getFullName() +
                                    " Department :  " + objCurrMember.getDept());     
            }
       }    
    }
     
   /**
    * populates the requests list box, with the requests that the selected staff member have.
    * 
    * @param objSelectedStaffMember = the staff member
    * @param objSelectedRequest = a initialiser for all the requests that will be cycled through
    * , for the purpose of populating the list box. 
    */
    private void refreshRequestsModel()
    {
        requestsModel.clear();
        StaffMember objSelectedStaffMember = 
                staffList.getStaffAt(staffMemberSelectedIndex);
        
        Request objSelectedRequest;
        
        if (this.leaveRecord.size() > 0){
            
            for (int i =0; i < leaveRecord.size(); i++){
                
                if(objSelectedStaffMember != null)
                {
                    if(objSelectedStaffMember.getRequestAt(i) != null){

                        objSelectedRequest = objSelectedStaffMember.getRequestAt(i);
                        requestsModel.addElement("Type: " +objSelectedRequest.getLeaveType()
                                + " | Status: " + objSelectedRequest.getStatus() 
                                + " | Duration: " + objSelectedRequest.getDuration() 
                                + " | Start Date: "  + objSelectedRequest.getDateAsString()  
                                + " | Days Left: " + objSelectedStaffMember.getDaysLeft()); 
                    }
                }
            }   
        } 
    }
     
    
    /////////////////////////////////////////////////////////////////////////
    //              Methods relating to staffmember / request options      //
    /////////////////////////////////////////////////////////////////////////

    
   /**
    * retrieves the index of the selected staff member, and populates the text boxes beneath the list box
    * with the information pertaining to the selected request;
    * Each time the listbox is selected, the index of the request is saved.
    * 
    * @param objSelectedStaffMember = the selected staff member - does not display information
    * @param objSelectedRequest = the selected request - displays request information accordingly.
    * @param requestsSelectedIndex = the index of the request that has been selected by the user.
    * 
    */
    private void showSelectedRequest(){
        StaffMember objSelectedStaffMember =
                staffList.getStaffAt(staffMemberSelectedIndex);
        Request objSelectedRequest =
                objSelectedStaffMember.getRequestAt(lstRequests.getSelectedIndex());
        
                if(objSelectedRequest != null){
                    txtLeaveType.setText(objSelectedRequest.getLeaveType().toString());
                    txtStatus.setText(objSelectedRequest.getStatus().toString());
                    txtStartDate.setText(objSelectedRequest.getDateAsString());
                    txtSpecialReason.setText(objSelectedRequest.getSpecialReason());
                    txtDuration.setText(Integer.toString(objSelectedRequest.getDuration()));
                    txtDaysLeft.setText(Integer.toString(objSelectedStaffMember.getDaysLeft()));
                }
        
                requestSelectedIndex = lstRequests.getSelectedIndex();
    }
    
   /**
    * When a user clicks on a staff member in the staff list listbox
    * the relevant information is shown in the text boxes.
    * 
    * @param objSelectedStaffMember = the selected staff member.
    * 
    * 
    */
    private void showSelectedStaffMember(){
       StaffMember objSelectedStaffMember =
            staffList.getStaffAt(lstStaffList.getSelectedIndex());
       
            // populate the staff member text boxes
            if (objSelectedStaffMember != null) {
                txtFirstName.setText(objSelectedStaffMember.getForename());
                txtSurname.setText(objSelectedStaffMember.getSurname());
                txtDepartment.setText(objSelectedStaffMember.getDept());
            }     
                
        //blank the text boxes relating to selected requests
        txtLeaveType.setText("");
        txtStatus.setText("");
        txtStartDate.setText("");
        txtSpecialReason.setText("");
        txtDuration.setText("");
        txtDaysLeft.setText("");
            
       staffMemberSelectedIndex = (lstStaffList.getSelectedIndex());     
    }
    
   /**
    * Deletes a staff member in the staffList Arraylist, at the given index
    * - provided by the LeaveRecordsMenu form, staff index variable.
    * 
    * @param staffToDelete = the staff member to delete.
    * @param 
    */
    private void deleteStaffMember(){
        
            StaffMember staffToDelete;
            staffToDelete = staffList.getStaffAt(staffMemberSelectedIndex);
            
            int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the staff member: "
                + staffToDelete.getFullName(),
                "Confirm removal", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION)
            {
                staffList.removeStaffAt(staffMemberSelectedIndex);
                
                // create the delete behaviour
                ICommandBehaviour objDelete 
                    = new DeleteStaffMemberCommand(staffList,staffToDelete,staffMemberSelectedIndex);
                // wrap behaviour into a command object
                ICommand objCommand = new Command(objDelete);
                // Ask the command tracker to execute the command
                this.objCmdTracker.executeCommand(objCommand);
                // refresh the form appropriately
                this.update();
            }
    }
   
   /**
    * This method can only be used on the first of January.
    * Its purpose is to delete all the requests of each staff member.
    * 
    * @param date = todays date, in a date format.
    * @param cal = todays date, in a calendar format. 
    * 
    */
    private void clearAllLeave()
    {
    Date date = new Date();
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);

       int confirm = JOptionPane.showConfirmDialog(this,
           "<html>Are you sure you want to remove all requests?"
           + "<br><br> Note: This can only be done on the first day of January </html>",
           "Confirm change", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION)
            {
                
               // Check if date is equals to: 1st Jan; Months start from 0
               if(cal.get(Calendar.MONTH) == 0 && cal.get(Calendar.DAY_OF_MONTH) == 1)
               {
                    if (this.staffList != null && this.staffList.size() > 0){ 
                        for (int i = 0; i < staffList.size(); i++){
                                
                            StaffMember objCurrMember = staffList.getStaffAt(i);
                            objCurrMember.clearAllLeave();
                        }
                    } 
                        JOptionPane.showMessageDialog(this,
                        "Staff members requests have successfully been deleted",
                        "Approved clear request", JOptionPane.INFORMATION_MESSAGE);
               }
               else
               {
                JOptionPane.showMessageDialog(this,
                "This can only be used on the first of January",
                "Date error", JOptionPane.ERROR_MESSAGE);
               }
                
            }
    }
    
   /**
    * This method defaults the textboxes values to null after a state change has been detected
    * 
    * @see refreshListModel
    * @see refreshRequestsModel 
    * 
    */
    @Override
    public void update()
    {
        refreshListModel();
        refreshRequestsModel();
        txtFirstName.setText("");
        txtSurname.setText("");
        txtDepartment.setText("");
        txtLeaveType.setText("");
        txtStatus.setText("");
        txtStartDate.setText("");
        txtSpecialReason.setText("");
        txtDuration.setText("");
        txtDaysLeft.setText("");
    }
    
    ///////////////////////////////////////////////////////////////////////////
    //                  Methods concerned with load/save                     //
    ///////////////////////////////////////////////////////////////////////////
    
   /**
    * A load method concerned with allowing the user to choose a file to load
    * 
    * @param objFile = specified file; chosen by the user.
    * @param objData = stafflist data
    * @param objData2 = leaveRecord data
    * @param saveDirectory = when the data has been loaded, the default directory 
    * for saving is the string value included.
    * 
    * @throws ClassNotFoundException
    * @throws IOException
    * @throws ClassCastException
    * 
    */
    private void loadStaffListData()
    {
        //Create Dialog
        JFileChooser objFileDialogue = new JFileChooser();
        //Create Dialogue result with default cancel action
        int intDialogResult = JFileChooser.CANCEL_OPTION;
        //Show Dialog
        intDialogResult = objFileDialogue.showOpenDialog(this);
        if (intDialogResult == JFileChooser.APPROVE_OPTION)
        {
            //Get the file name to use from the dialog
            File objFile = objFileDialogue.getSelectedFile();
            //Check the file exists and is readable
            if(objFile.exists() && objFile.canRead())
            {
                //Try to read the file and create new data model
                try(ObjectInputStream objIn = new ObjectInputStream(
                        new BufferedInputStream(
                        new FileInputStream(objFile))))
                
                {
                    // Read objects - wrong order causes class exception error
                    // read the first object: StaffList
                    Object objData = objIn.readObject();
                    StaffList objNewStaffList = (StaffList)objData;
                    
                    // read the second object: LeaveRecord
                    Object objData2 = objIn.readObject();
                    LeaveRecord objNewLeaveRecord =(LeaveRecord)objData2;
                    
                    //If we have a StaffList object...
                    if(objNewStaffList != null){
                        //...Get list of objects observing the current StaffList
                        ArrayList<IObserver> objStaffListObservers = 
                                staffList.getObservers();
                        //De-register the observers from current warehouse
                        for(IObserver currObserver : objStaffListObservers){
                            staffList.removeObserver(currObserver);
                        }
                        //Register observers with new warehouse
                        for(IObserver currObserver : objStaffListObservers){
                            objNewStaffList.registerObserver(currObserver);
                        }
                        
                        // Replace current arraylist data with that from file
                        leaveRecord = objNewLeaveRecord;
                        staffList = objNewStaffList;
                        
                        //Update observers
                        staffList.notifyObservers();
                        // change save directory to match this
                        saveDirectory = objFile.toString();
                    }else
                    {
                        JOptionPane.showMessageDialog(this, 
                                "No staff data found", 
                                "Error reading file", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch(ClassNotFoundException | IOException | ClassCastException ex)
                {
                    JOptionPane.showMessageDialog(this, 
                            "Data file could not be read", 
                            "Operation aborted", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(this, 
                        "File not found / unreadable.", 
                        "Error accessing file", JOptionPane.ERROR_MESSAGE);
            }
        } else
        {
            JOptionPane.showMessageDialog(this, 
                    "File load cancelled", 
                    "Operation aborted", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
   /**
    * A load method concerned with loading a default file, located in the directory
    * of this application. 
    * 
    * @param objFile = specified file; chosen by the user.
    * @param objData = stafflist data
    * @param objData2 = leaveRecord data
    * @param saveDirectory = when the data has been loaded, the default directory 
    * for saving is the string value included.
    * 
    * @throws ClassNotFoundException
    * @throws IOException
    * @throws ClassCastException
    * 
    */
    private void loadStartData()
    {
                //Try to read the file and create new data model
                try(    
                        ObjectInputStream objIn = new ObjectInputStream(
                        new BufferedInputStream(
                        new FileInputStream("default"))))
                {
                    // Read objects - wrong order causes class exception error
                    // read the first object: StaffList
                    Object objData = objIn.readObject();
                    StaffList objNewStaffList = (StaffList)objData;
                    
                    // read the second object: LeaveRecord
                    Object objData2 = objIn.readObject();
                    LeaveRecord objNewLeaveRecord =(LeaveRecord)objData2;
                    
                    
                    //If we have a StaffList object...
                    if(objNewStaffList != null){
                        //...Get list of objects observing the current StaffList
                        ArrayList<IObserver> objStaffListObservers = 
                                staffList.getObservers();
                        //De-register the observers from current warehouse
                        for(IObserver currObserver : objStaffListObservers){
                            staffList.removeObserver(currObserver);
                        }
                        //Register observers with new warehouse
                        for(IObserver currObserver : objStaffListObservers){
                            objNewStaffList.registerObserver(currObserver);
                        }
                        
                        // Replace existing LeaveRecord:
                        leaveRecord = objNewLeaveRecord;
                        
                        //Replace existing StaffList:
                        staffList = objNewStaffList;
                        
                        
                        //Update observers
                        staffList.notifyObservers();
                        //save the file directory in a string, so it can be saved to in the future, easilly
                        saveDirectory = "default";
                    }else
                    {
                        JOptionPane.showMessageDialog(this, 
                                "No stock data found", 
                                "Error reading file", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch(ClassNotFoundException | IOException | ClassCastException ex)
                {
                }
    }

   /**
    * This method allows the user to save data by choosing a specific directory
    * 
    * @param objFile = the directory to save the file to. 
    * @param staffList = the stafflist to save
    * @param leaveRecord = the leaverecord to save
    */
    private void saveStaffListData()
    {
        
        //Create Dialog
        JFileChooser objFileDialogue = new JFileChooser();
        //Create Dialogue result with default cancel action
        int intDialogResult = JFileChooser.CANCEL_OPTION;
        //Show Dialog
        intDialogResult = objFileDialogue.showSaveDialog(this);
        //Test dialog result
        if (intDialogResult == JFileChooser.APPROVE_OPTION)
        {
            //Get the file name to use from the dialog
            File objFile = objFileDialogue.getSelectedFile();
            //Declare output stream
            //Create a Stream writer to the file
            try (ObjectOutputStream objOut = new ObjectOutputStream(
                            new BufferedOutputStream(
                            new FileOutputStream(objFile))))
            
            {
                // save staff list and leave record
                objOut.writeObject(staffList);
                objOut.writeObject(leaveRecord);
                
                JOptionPane.showMessageDialog(this,
                        "Staff data saved.",
                        "Save completed.", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex)
            {
                Logger.getLogger(LeaveRecordsMenu.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                        "Error saving data model.",
                        "File save error: " + ex.getMessage(), JOptionPane.ERROR_MESSAGE);
            }
        } else
        {
            JOptionPane.showMessageDialog(this,
                    "Save operation cancelled",
                    "Operation aborted", JOptionPane.ERROR_MESSAGE);
        }
    }
   
   /**
    * once a user has loaded a file, the save point automatically becomes it. so this allows the user to
    * save, without having to manually find the same directory and file again.
    * 
    * @param saveDirectory = the location to save to; specified by load save methods.
    * @param staffList = the stafflist to save
    * @param leaveRecord = the leaverecord to save
    * 
    */
    private void saveStaffListDataDefault(){

            //Create a Stream writer to the file
            try (ObjectOutputStream objOut = new ObjectOutputStream(
                            new BufferedOutputStream(
                            new FileOutputStream(saveDirectory))))
            {
                //Write out both the stafflist and leaverecord objects
                objOut.writeObject(staffList);
                objOut.writeObject(leaveRecord);
            } catch (IOException ex)
            {
                Logger.getLogger(LeaveRecordsMenu.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                        "Error saving data model.",
                        "File save error: " + ex.getMessage(), JOptionPane.ERROR_MESSAGE);
            }
    }  
}
